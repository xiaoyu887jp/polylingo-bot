from flask import Flask, request
import requests, os

app = Flask(__name__)

LINE_ACCESS_TOKEN = "B3blv9hwkVhaXvm9FEpijEck8hxdiNIhhlXD9A+OZDGGYhn3mEqs71gF1i88JV/7Uh+ZM9mOBOzQlhZNZhl6vtF9X/1j3gyfiT2NxFGRS8B6I0ZTUR0J673O21pqSdIJVTk3rtvWiNkFov0BTlVpuAdB04t89/1O/w1cDnyilFU="
GOOGLE_API_KEY = "AIzaSyBOMVXr3XCeqrD6WZLRLL-51chqDA9I80o"

user_language_settings = {}
user_usage = {}
MONTHLY_FREE_QUOTA = 5000

LANGUAGES = ["en", "ja", "zh-tw", "zh-cn", "th", "vi", "fr", "es", "de", "id", "hi", "it", "pt", "ru", "ar", "ko"]

quota_messages = {
    "en": "‚ö†Ô∏è Your free translation quota (5000 characters) has been exhausted. Subscribe here: https://polylingo-bot.onrender.com",
    "zh-tw": "‚ö†Ô∏è ÊÇ®ÁöÑÂÖçË≤ªÁøªË≠ØÈ°çÂ∫¶Ôºà5000Â≠óÔºâÂ∑≤‰ΩøÁî®ÂÆåÁï¢„ÄÇË´ãÈªûÊìäË®ÇÈñ±Ôºöhttps://polylingo-bot.onrender.com",
    "zh-cn": "‚ö†Ô∏è ÊÇ®ÁöÑÂÖçË¥πÁøªËØëÈ¢ùÂ∫¶Ôºà5000Â≠óÔºâÂ∑≤Áî®ÂÆå„ÄÇËØ∑ÁÇπÂáªËÆ¢ÈòÖÔºöhttps://polylingo-bot.onrender.com",
    "ja": "‚ö†Ô∏è ÁÑ°ÊñôÁøªË®≥Êû†Ôºà5000ÊñáÂ≠óÔºâ„Çí‰Ωø„ÅÑÂàá„Çä„Åæ„Åó„Åü„ÄÇÁôªÈå≤„ÅØ„Åì„Å°„ÇâÔºöhttps://polylingo-bot.onrender.com",
    "ko": "‚ö†Ô∏è Î¨¥Î£å Î≤àÏó≠ ÌïúÎèÑ(5000Ïûê)Î•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§. Íµ¨ÎèÖÌïòÍ∏∞: https://polylingo-bot.onrender.com",
    "th": "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ü‡∏£‡∏µ (5000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£) ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: https://polylingo-bot.onrender.com",
    "vi": "‚ö†Ô∏è B·∫°n ƒë√£ d√πng h·∫øt h·∫°n ng·∫°ch mi·ªÖn ph√≠ (5000 k√Ω t·ª±). ƒêƒÉng k√Ω t·∫°i ƒë√¢y: https://polylingo-bot.onrender.com",
    "fr": "‚ö†Ô∏è Vous avez √©puis√© votre quota gratuit (5000 caract√®res). Abonnez-vous ici : https://polylingo-bot.onrender.com",
    "es": "‚ö†Ô∏è Has agotado tu cuota gratuita (5000 caracteres). Suscr√≠bete aqu√≠: https://polylingo-bot.onrender.com",
    "de": "‚ö†Ô∏è Ihr kostenloses Limit (5000 Zeichen) ist ersch√∂pft. Hier abonnieren: https://polylingo-bot.onrender.com",
    "id": "‚ö†Ô∏è Kuota gratis Anda (5000 karakter) telah habis. Berlangganan: https://polylingo-bot.onrender.com",
    "hi": "‚ö†Ô∏è ‡§Ü‡§™‡§ï‡§æ ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ ‡§ï‡•ã‡§ü‡§æ (5000 ‡§Ö‡§ï‡•ç‡§∑‡§∞) ‡§ñ‡§§‡•ç‡§Æ‡•§ ‡§Ø‡§π‡§æ‡§Ç ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç: https://polylingo-bot.onrender.com",
    "it": "‚ö†Ô∏è Hai esaurito la quota gratuita (5000 caratteri). Abbonati qui: https://polylingo-bot.onrender.com",
    "pt": "‚ö†Ô∏è Sua cota gr√°tis (5000 caracteres) acabou. Assine aqui: https://polylingo-bot.onrender.com",
    "ru": "‚ö†Ô∏è –í–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç (5000 —Å–∏–º–≤–æ–ª–æ–≤) –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: https://polylingo-bot.onrender.com",
    "ar": "‚ö†Ô∏è ŸÑŸÇÿØ ÿßÿ≥ÿ™ŸÜŸÅÿØÿ™ ÿ≠ÿµÿ© ÿßŸÑÿ™ÿ±ÿ¨ŸÖÿ© ÿßŸÑŸÖÿ¨ÿßŸÜŸäÿ© (5000 ÿ≠ÿ±ŸÅ). ÿßÿ¥ÿ™ÿ±ŸÉ ŸáŸÜÿß: https://polylingo-bot.onrender.com"
}

flex_message_json = {"type":"bubble","header":{"type":"box","layout":"vertical","contents":[{"type":"text","text":"üåç Please select translation language","weight":"bold","size":"lg","align":"center"}],"backgroundColor":"#FFCC80"},"body":{"type":"box","layout":"vertical","spacing":"sm","contents":[
    {"type":"button","style":"primary","color":"#4CAF50","action":{"type":"message","label":"üá∫üá∏ English","text":"en"}},
    {"type":"button","style":"primary","color":"#33CC66","action":{"type":"message","label":"üá®üá≥ ÁÆÄ‰Ωì‰∏≠Êñá","text":"zh-cn"}},
    {"type":"button","style":"primary","color":"#3399FF","action":{"type":"message","label":"üáπüáº ÁπÅÈ´î‰∏≠Êñá","text":"zh-tw"}},
    {"type":"button","style":"primary","color":"#FF6666","action":{"type":"message","label":"üáØüáµ Êó•Êú¨Ë™û","text":"ja"}},
    {"type":"button","style":"primary","color":"#9966CC","action":{"type":"message","label":"üá∞üá∑ ÌïúÍµ≠Ïñ¥","text":"ko"}},
    {"type":"button","style":"primary","color":"#FFCC00","action":{"type":"message","label":"üáπüá≠ ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢","text":"th"}},
    {"type":"button","style":"primary","color":"#FF9933","action":{"type":"message","label":"üáªüá≥ Ti·∫øng Vi·ªát","text":"vi"}},
    {"type":"button","style":"primary","color":"#33CCCC","action":{"type":"message","label":"üá´üá∑ Fran√ßais","text":"fr"}},
    {"type":"button","style":"primary","color":"#33CC66","action":{"type":"message","label":"üá™üá∏ Espa√±ol","text":"es"}},
    {"type":"button","style":"primary","color":"#3399FF","action":{"type":"message","label":"üá©üá™ Deutsch","text":"de"}},
    {"type":"button","style":"primary","color":"#4CAF50","action":{"type":"message","label":"üáÆüá© Bahasa Indonesia","text":"id"}},
    {"type":"button","style":"primary","color":"#FF6666","action":{"type":"message","label":"üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä","text":"hi"}},
    {"type":"button","style":"primary","color":"#66CC66","action":{"type":"message","label":"üáÆüáπ Italiano","text":"it"}},
    {"type":"button","style":"primary","color":"#FF9933","action":{"type":"message","label":"üáµüáπ Portugu√™s","text":"pt"}},
    {"type":"button","style":"primary","color":"#9966CC","action":{"type":"message","label":"üá∑üá∫ –†—É—Å—Å–∫–∏–π","text":"ru"}},
    {"type":"button","style":"primary","color":"#CC3300","action":{"type":"message","label":"üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©","text":"ar"}},
    {"type":"button","style":"secondary","action":{"type":"message","label":"üîÑ Reset","text":"/resetlang"}}
  ]}
}

def reply_to_line(reply_token, messages):
    headers = {"Authorization": f"Bearer {LINE_ACCESS_TOKEN}"}
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json={"replyToken": reply_token, "messages": messages})

def translate(text, target_language):
    url = f"https://translation.googleapis.com/language/translate/v2?key={GOOGLE_API_KEY}"
    data = {"q": text, "target": target_language}
    response = requests.post(url, json=data)
    return response.json()["data"]["translations"][0]["translatedText"]

@app.route("/callback", methods=["POST"])
def callback():
    events = request.get_json().get("events", [])
    for event in events:
        reply_token = event.get("replyToken")
        if not reply_token:
            continue

        source = event["source"]
        group_id = source.get("groupId", "private")
        user_id = source.get("userId", "unknown")
        key = f"{group_id}_{user_id}"

        if event["type"] == "join":
            user_language_settings[key] = []
            reply_to_line(reply_token, [{"type": "flex", "altText": "Select language", "contents": flex_message_json}])
            continue

        if event["type"] == "message" and event["message"]["type"] == "text":
            user_text = event["message"]["text"]

            if user_text == "/resetlang":
                user_language_settings[key] = []
                reply_to_line(reply_token, [{"type": "flex", "altText": "Select language", "contents": flex_message_json}])
                continue

            if user_text in LANGUAGES:
                user_language_settings.setdefault(key, []).append(user_text)
                reply_to_line(reply_token, [{"type": "text", "text": f"‚úÖ Your languages: {', '.join(user_language_settings[key])}"}])
                continue

            langs = user_language_settings.get(key, [])
            if not langs:
                reply_to_line(reply_token, [{"type": "text", "text": "‚ö†Ô∏è Please set your language first using /resetlang."}])
                continue

            user_usage.setdefault(key, 0)
            if user_usage[key] + len(user_text) > MONTHLY_FREE_QUOTA:
                lang = langs[0] if langs else "en"
                reply_to_line(reply_token, [{"type": "text", "text": quota_messages.get(lang, quota_messages["en"])}])
                continue

            user_usage[key] += len(user_text)

    source = event["source"]
    group_id = source.get("groupId", "private")
    user_id = source.get("userId", "unknown")
    key = f"{group_id}_{user_id}"

    profile = requests.get(
        f"https://api.line.me/v2/bot/profile/{user_id}",
        headers={"Authorization": f"Bearer {LINE_ACCESS_TOKEN}"}
    ).json()

    user_avatar = profile["pictureUrl"]

# Áªü‰∏ÄÊòæÁ§∫ÂêçÂ≠ó‰∏∫ Saygo + ËØ≠Ë®Ä‰ª£Á†Å
messages = [
    {
        "type": "text",
        "text": html.unescape(translate(user_text, lang)),
        "sender": {
            "name": f"Saygo {lang.upper()}",
            "iconUrl": user_avatar
        }
    } for lang in langs
]

    reply_to_line(reply_token, messages)

    return 'OK', 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

